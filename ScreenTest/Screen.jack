// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static int cahngePixelArr;
    static boolean color;
    static Array screen;
    static int screenSize;
    static boolean WHITE;
    static boolean BLACK;
    /** Initializes the library. */
    function void init() {
        let BLACK = true;
        let color = BLACK;
        let screen = 16384;
        let screenSize = 8192;
        let WHITE = false;
        let cahngePixelArr = Array.new(16);
        let cahngePixelArr[0]  = 1;      //0000000000000001
        let cahngePixelArr[1]  = 2;      //0000000000000010
        let cahngePixelArr[2]  = 4;      //0000000000000100
        let cahngePixelArr[3]  = 8;      //0000000000001000
        let cahngePixelArr[4]  = 16;     //0000000000010000
        let cahngePixelArr[5]  = 32;     //0000000000100000
        let cahngePixelArr[6]  = 64;     //0000000001000000
        let cahngePixelArr[7]  = 128;    //0000000010000000
        let cahngePixelArr[8]  = 256;    //0000000100000000
        let cahngePixelArr[9]  = 512;    //0000001000000000
        let cahngePixelArr[10] = 1024;   //0000010000000000
        let cahngePixelArr[11] = 2048;   //0000100000000000
        let cahngePixelArr[12] = 4096;   //0001000000000000
        let cahngePixelArr[13] = 8192;   //0010000000000000
        let cahngePixelArr[14] = 16384;  //0100000000000000
        let cahngePixelArr[15] = 16384 + 16384; //1000000000000000
        do Screen.clearScreen();

        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < screenSize ) {
            let screen[i] = WHITE;
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {

        var int adress, mod,address;

        let address = ((32 * y) + (x / 16));

        let mod = (x & 15);
        if(color){
            //black
            let screen[address] = (screen[address] | cahngePixelArr[mod]);
        } else {
            //white
            let screen[address] = (screen[address] & ~cahngePixelArr[mod]);
        }
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy,tempX,tempY;
        
        // force lines from left to right
        if( x1 > x2 ) {
            let tempX = x1;
            let tempY = y1;
            let x1 = x2;
            let y1 = y2;
            let x2 = tempX;
            let y2 = tempY;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if( dx = 0 ) {
            // force down to top
            if( y1 > y2 ) {
                let tempY = y1;
                let y1 = y2;
                let y2 = tempY;
            }
            
            while( ~(y1 > y2) ) {
                do Screen.drawPixel( x1, y1 );
                let y1 = y1 + 1;
            }
        }
        else { if( dy = 0 ) {
           while( ~(x1 > x2) ) {
                do Screen.drawPixel( x1, y1 );
                let x1 = x1 + 1;
            }
        }
        else {
            do Screen.doDrawLine(x1,y1,dx,dy);
        }}
        
        return;
    }

    function void doDrawLine(int x, int y, int dx, int dy ) {
        var int a, b;
        //b/a > dy/dx == a*dy - b * dx (a > 0 & dx > 0);
        var int delta;
        var int directionY;

        let a = 0;
        let b = 0;
        let delta = 0;
        let directionY = 1;
        if( dy < 0 ) {
            let directionY = -1;
        }

        while (  ~(a > dx) & 
                ( ((directionY =  1)  & ~(b > dy)) |
                 ((directionY = -1)  & ~(b < dy)))) {
            do Screen.drawPixel(x + a,y + b);
            if( delta < 0 ) {
                let a = a + 1;
                let delta = delta + (dy * directionY);
            }
            else {
                let b = b + directionY;
                let delta = delta - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)){
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy, rr, dydy;
        let rr = r*r;
        let dy = -r;
        while( ~(dy > r) ) {
            let dydy = dy * dy;
            let dx = Math.sqrt(rr - dydy);
            do Screen.drawLine( cx - dx,cy + dy, cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
